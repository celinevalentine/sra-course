service: sra-backend
# tenant: serverlessdev
# app: sra-backend
plugins:
  # - '@serverless/enterprise-plugin'
  - serverless-pseudo-parameters
  - serverless-plugin-additional-stacks
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs10.x
  profile: ${opt:profile, "serverless-tutorial"}  # cat ~/.aws/credentials 
  region: ${opt:region, "us-west-2"}  # sls deploy --region us-east-2
  stage: ${opt:stage, "dev"} # sls deploy --stage test || qa, dev, prod
  environment:
    REGION: ${self:provider.region}
functions:
  getAllUsers:
    handler: src/handlers/api.handler
    events:
      - http:
          path: users
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.DynamoDBTableName}
  updateUser:
    handler: src/handlers/api.handler
    events:
      - http:
          path: users/{id}
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
      S3_BUCKET: ${self:custom.s3BucketName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.DynamoDBTableName}
      - Effect: "Allow"
        Action:
          - s3:PutObject*
        Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
  createUser:
    handler: src/handlers/api.handler
    events:
      - http:
          path: users
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
      S3_BUCKET: ${self:custom.s3BucketName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.DynamoDBTableName}
      - Effect: "Allow"
        Action:
          - s3:PutObject*
        Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
  deleteUser:
    handler: src/handlers/api.handler
    events:
      - http:
          path: users/{id}
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.DynamoDBTableName}
  getUser:
    handler: src/handlers/api.handler
    events:
      - http:
          path: users/{id}
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.DynamoDBTableName}
custom:
  DynamoDBTableName: ${self:service}-users-table-${self:provider.stage} # sra-backend-users-table-test
  s3BucketName: ${self:service}-profile-images-${self:provider.stage}
  additionalStacks:
    s3:
      Deploy: Before
      Resources: ${file(./resources/s3.yml)}
    cognito:
      Deploy: Before
      Resources: ${file(./resources/cognito.yml)}
      Outputs: ${file(./resources/cognito-outputs.yml)}
resources:
  Resources:
    # API Gateway Cognito Authorizor
    ApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::ImportValue: ${self:service}-cognito:${self:provider.stage}:CognitoArn
    myDynamoDBTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions: 
          - AttributeName: user_id
            AttributeType: S
        KeySchema: 
          - AttributeName: user_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.DynamoDBTableName}